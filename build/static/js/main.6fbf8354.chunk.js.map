{"version":3,"sources":["components/common/Header.js","components/books/BookRow.js","components/books/BookPage.js","App.js","serviceWorker.js","index.js","reducers/bookReducer.js","actions/actions.js"],"names":["Header","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","BookRow","props","book","scope","key","author","title","BookPage","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","Fragment","books","map","books_BookRow","Component","connect","state","App","common_Header","books_BookPage","Boolean","window","location","hostname","match","store","createStore","length","undefined","action","toConsumableArray","concat","assign","dispatch","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fbf8354.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">SOFTEAM Bookshelf</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                    data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                    aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"/>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item active\">\n                        <a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" href=\"#\">Books</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookRow = (props) => {\n\n    const {book} = props;\n\n    return (\n        <tr>\n            <th scope=\"row\" key={book.key}>{book.key}</th>\n            <td>{book.author}</td>\n            <td>{book.title}</td>\n        </tr>\n    );\n};\n\nBookRow.propTypes = {\n    book: PropTypes.object.isRequired\n};\n\nexport default BookRow;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport BookRow from \"./BookRow\";\n\nexport class BookPage extends Component {\n    render() {\n        \n        return (\n            <>\n                <h1>Books</h1>\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">#</th>\n                        <th scope=\"col\">Author</th>\n                        <th scope=\"col\">Title</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.books.map(book => <BookRow key={book.key} book={book}/>)}\n                    </tbody>\n                </table>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n\n    //debugger;\n    return {\n        books: state\n    }\n};\n\nexport default connect(\n    mapStateToProps\n)(BookPage)","import React, {Component} from 'react';\nimport './App.css';\n\nimport Header from './components/common/Header'\nimport BookPage from './components/books/BookPage'\n\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nclass App extends Component {\n    render() {\n        return (\n            <>\n                <Header/>\n                <div className=\"container\">\n                    <BookPage/>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as actions from './actions/actions'\nimport bookReducer from './reducers/bookReducer'\n\nlet store = createStore(bookReducer);\n\nstore.dispatch(actions.loadBook({\n    key: 1,\n    title: 'Clean Code: A Handbook of Agile Software Craftsmanship',\n    author: 'Robert Martin'\n}));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default function bookReducer(state = [], action) {\n\n    //debugger;\n\n    switch (action.type) {\n\n        case 'LOAD_BOOK':\n            return [...state].concat(Object.assign({}, action.book));\n        case 'LOAD_BOOKS':\n            return [...action.books];\n        default:\n            return state\n    }\n}","export function loadBooks(books) {\n    return {\n        type: 'LOAD_BOOKS',\n        books\n    }\n}\n\nexport function loadBook(book) {\n    return {\n        type: 'LOAD_BOOK',\n        book\n    }\n}"],"sourceRoot":""}